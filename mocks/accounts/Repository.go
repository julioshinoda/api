// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "github.com/julioshinoda/api/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: account
func (_m *Repository) Create(account models.Account) (models.Account, error) {
	ret := _m.Called(account)

	var r0 models.Account
	if rf, ok := ret.Get(0).(func(models.Account) models.Account); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Get(0).(models.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Account) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByDocument provides a mock function with given fields: document
func (_m *Repository) GetByDocument(document string) (models.Account, error) {
	ret := _m.Called(document)

	var r0 models.Account
	if rf, ok := ret.Get(0).(func(string) models.Account); ok {
		r0 = rf(document)
	} else {
		r0 = ret.Get(0).(models.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ID
func (_m *Repository) GetByID(ID int32) (models.Account, error) {
	ret := _m.Called(ID)

	var r0 models.Account
	if rf, ok := ret.Get(0).(func(int32) models.Account); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(models.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
